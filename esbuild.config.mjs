// esbuild.config.mjs
import * as esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// pass "production" as the first arg to build a one-off prod bundle
const prod = process.argv[2] === "production";

const opts = {
  banner: { js: banner },
  entryPoints: ["main.ts"],            // or ["src/main.ts"] if that's your layout
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/closebrackets",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/comment",
    "@codemirror/fold",
    "@codemirror/gutter",
    "@codemirror/highlight",
    "@codemirror/history",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/matchbrackets",
    "@codemirror/panel",
    "@codemirror/rangeset",
    "@codemirror/rectangular-selection",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/stream-parser",
    "@codemirror/text",
    "@codemirror/tooltip",
    "@codemirror/view",
    ...builtins,
  ],
  format: "cjs",
  platform: "browser",
  target: "es2020",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  outfile: "main.js",
};

try {
  if (prod) {
    await esbuild.build(opts);
    console.log("[esbuild] build complete");
  } else {
    const ctx = await esbuild.context(opts);
    await ctx.watch();                 // <-- correct watcher for 0.23+
    console.log("[esbuild] watchingâ€¦");
    process.stdin.resume();            // keep process alive
  }
} catch (err) {
  console.error(err);
  process.exit(1);
}
